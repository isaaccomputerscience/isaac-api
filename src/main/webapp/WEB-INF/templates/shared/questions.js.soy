{namespace shared.questions}

/**
 * RenderQuestionContent
 * This template is responsible for rendering question pages and selecting the correct question templates
 * @param contentObject - map of content
 */
{template .renderQuestionContent}	
	/* Render quick question style question (show / hide functionality) */
	{if $contentObject.type == 'question'}
		{call .renderShowHideQuestion}
			{param contentObject:$contentObject /}
		{/call}	
	/* Render mcq question */
	{elseif $contentObject.type == 'isaacMultiChoiceQuestion'}
		<div class="question">
			<p>
			{call shared.segue.utils.renderContent}
				{param contentObject:$contentObject /}
			{/call}
			</p>
		</div>
		{call shared.questions.mcq}
			{param contentObject:$contentObject /}
			{param type:'radio' /}
		{/call}
	/* Recursive case - continue looking for questions in the list of content provided */
	{elseif $contentObject.children and length($contentObject.children) > 0 }
		{foreach $contentItem in $contentObject.children}
			{call .renderQuestionContent}
				{param contentObject:$contentItem /}
			{/call}
		{/foreach}				
	/* Fall back to just rendering the content as plain content */
	{elseif $contentObject.value != null}
		<p>
		{call shared.segue.utils.renderContent}
			{param contentObject:$contentObject /}
		{/call}
		</p>
	{else}
		<p>Unrecognised question content.. Unable to render anything.</p>
	{/if}
{/template}

/**
 * RenderShowHideQuestion
 * This template reuses the quick question structure to facilitate simple show/hide style questions
 * This question style should work by default for all well formed questions imported from LaTeX
 * 
 * @param contentObject - map of content
  */
{template .renderShowHideQuestion}
	/* Render quick question style question (show / hide functionality) */
	<div class="quick-question">
		<div class="question">
			<p>
			/* Current assumption that questions will only have literal content */
			{call shared.segue.utils.renderContent}
				{param contentObject:$contentObject /}
			{/call}
			</p>
			/* if we have a hint list then we should render them after the question */
			<p>
			{if $contentObject.hints}
				{foreach $hintItem in $contentObject.hints}
					<p><strong>Hint:</strong> {$hintItem.value}</p>
				{/foreach}
			{/if}
			</p>					
		</div>
		<div class="answer hidden">
			<p>
			{call shared.segue.utils.renderContent}
				{param contentObject:$contentObject.answer /}
			{/call}
			</p>
		</div>
	</div>
	<br/>
{/template}


/**
 * Multiple choice questions
 * @param contentObject
 * @param type
 */
{template .mcq}
<hr/>
<div class="small-offset-1">
<ol class="mcq">
	{let $choices: $contentObject.choices /}
	{foreach $answer in $choices}
		<li><input type="{$type}" name="mcq" value="{$answer.correct ? 1 : 0}">{call shared.segue.utils.renderContent}{param contentObject : $answer/}{/call}</input></li>
	{/foreach}
</ol>
</div>
<button id="checkAnswer" type="button" class="button">Check my answer</button>
<span class="error question-wrong">
	Sorry, that's wrong. Please try again.
</span>
{call .questionExplanation}
	{param explanation}{call shared.segue.utils.renderContent}{param contentObject : $contentObject.answer/}{/call}{/param}
{/call}
{/template}

/**
 * Question explanation.
 * @param explanation
 */
{template .questionExplanation}
<p>
<span class="error large question-explanation" style="display:none;">
	Well done! {$explanation |noAutoescape}
</span>
</p>
{/template}
