package uk.ac.cam.cl.dtg.segue.auth;

import java.io.IOException;

/**
 * This interface defines the required methods for an oauth 2.0 provider
 * 
 * @author sac92
 */
public interface IOAuth2Authenticator {

	/**
	 * Step 1 of OAUTH2 - Request authorisation URL.
	 * Request an authorisation url which will allow the user to be logged in with their oauth provider.
	 *  
	 * @return String - A url which should be fully formed and ready for the user to login with - this should result in a callback to a prearranged api endpoint if successful.
	 * @throws IOException - if there is a problem with the end point.
	 */
	public String getAuthorizationUrl() throws IOException;
	
	/**
	 * Step 1 of OAUTH2 - Request authorisation URL.
	 * Request an authorisation url which will allow the user to be logged in with their oauth provider.
	 *  
	 * @param email - A string to help identify the user
	 * @return String - A url which should be fully formed and ready for the user to login with - this should result in a callback to a prearranged api endpoint if successful.
	 * @throws IOException - if there is a problem with the end point.
	 */	
	public String getAuthorizationUrl(String emailAddress) throws IOException;

	/**
	 * Step 2 of OAUTH2 - Get authorisation code from oauth provider using the response URL they have provided.
	 * 
	 * @param url containing the authorisation code
	 * @return the extracted authorisation code.
	 * @throws IOException
	 */
	public String extractAuthCode(String url) throws IOException;

	/**
	 * Step 3 of OAUTH2 - Exchange short term authorisation code for an access token which can be used to authenticate the user.
	 * 
	 * This method will contact the oauth provider directly to exchange the authorisation code for a token.
	 * 
	 * This method returns an internal reference which will allow it to look up the 3rd party token. e.g. if you call an IFederatedAuthenticator method getUserDetails - it will require this internal reference.
	 * 
	 * @param authorizationCode as provided by the getAuthCode method.
	 * @return String containing a reference number generated by this IOAuth2Authenticator that allows us to use FederatedAuthentication methods that require an internal reference number.
	 * @throws IOException, CodeExchangeException, NoUserIdException
	 */
	public String exchangeCode(String authorizationCode) throws IOException, CodeExchangeException, NoUserIdException;
	
	/**
	 * This method generates an anti CSRF token to be included in the authorisation step (step 1).
	 * 
	 * @return SecureRandom token.
	 */
	public String getAntiForgeryStateToken();

}
